import java_cup.runtime.*;

action code {: 
				 
				static int x = 0;  
				static int y = 0; 
				
				public static void locate_it(int xx, int yy) {
						x = xx;
						y = yy;
				}
								
				public static void move_it(int xx, int yy) {
						x += xx;
						y += yy;
				}
				
				public static void show_it() {
					System.out.println("Finaliza en x:" + x + ", y:" + y);
					System.out.println("Fin de ejecuci√≥n.");
				}	
:}

/* Terminales */
terminal INICIO, FIN, UBICAR, VERTICAL, LATERAL, PAR_A, PAR_C, SUMA, RESTA, REPETIR, COR_A, COR_C, COMA;

/* Terminales con atributo asociado */
terminal Integer ENTERO;  

non terminal PROGRAMA, CUERPO, LINEAS, LINEA1;

start with PROGRAMA;

/* Programa vacio */
PROGRAMA ::= INICIO FIN
{: 
	System.out.println("Programa vacio");
	show_it(); 
:};

/* Programa con contenido */
PROGRAMA ::= INICIO CUERPO FIN 
{:
	show_it(); 
:};	

PROGRAMA ::= INICIO LINEA1 CUERPO FIN 
{:
	show_it();
:};	

LINEA1 ::= UBICAR PAR_A ENTERO:n1 COMA ENTERO:n2 PAR_C 
{:
	System.out.println("Se ubica en x:"+n1.intValue()+", y:"+n2.intValue());
	locate_it(n1.intValue(),n2.intValue());
:};

LINEA1 ::= UBICAR PAR_A RESTA ENTERO:n1 COMA RESTA ENTERO:n2 PAR_C 
{:
	System.out.println("Se ubica en x:-"+n1.intValue()+", y:-"+n2.intValue());
	locate_it(-n1.intValue(),-n2.intValue());
:};

LINEA1 ::= UBICAR PAR_A RESTA ENTERO:n1 COMA ENTERO:n2 PAR_C 
{:
	System.out.println("Se ubica en x:-"+n1.intValue()+", y:"+n2.intValue());
	locate_it(-n1.intValue(),n2.intValue());
:};

LINEA1 ::= UBICAR PAR_A ENTERO:n1 COMA RESTA ENTERO:n2 PAR_C 
{:
	System.out.println("Se ubica en x:"+n1.intValue()+", y:-"+n2.intValue());
	locate_it(n1.intValue(),-n2.intValue());
:};

CUERPO ::= LINEAS
{:  
:};

CUERPO ::= CUERPO LINEAS
{:  
:};

LINEAS ::= VERTICAL PAR_A SUMA ENTERO:n1 PAR_C 
{:
	System.out.println("Sube: "+n1.intValue());
	move_it(0,n1.intValue());
:};

LINEAS ::= REPETIR PAR_A ENTERO:n1 PAR_C COR_A VERTICAL PAR_A SUMA ENTERO:n2 PAR_C COR_C
{: 
	for (int i = 0; i < n1; i++) {
		System.out.println("Rep("+i+")-> Sube: "+n2.intValue());
		move_it(0,n2.intValue());
	} 
:};	

LINEAS ::= VERTICAL PAR_A ENTERO:n1 PAR_C 
{:
	System.out.println("Sube: "+n1.intValue());
	move_it(0,n1.intValue());
:};

LINEAS ::= REPETIR PAR_A ENTERO:n1 PAR_C COR_A VERTICAL PAR_A ENTERO:n2 PAR_C COR_C
{: 
	for (int i = 0; i < n1; i++) {
		System.out.println("Rep("+i+")-> Sube: "+n2.intValue());
		move_it(0,n2.intValue());
	} 
:};	

LINEAS ::= VERTICAL PAR_A RESTA ENTERO:n1 PAR_C
{: 
	System.out.println("Baja: "+n1.intValue());
	move_it(0,-n1.intValue()); 
:};

LINEAS ::= REPETIR PAR_A ENTERO:n1 PAR_C COR_A VERTICAL PAR_A RESTA ENTERO:n2 PAR_C COR_C
{: 
	for (int i = 0; i < n1; i++) {
		System.out.println("Rep("+i+")-> Baja: "+n2.intValue());
		move_it(0,-n2.intValue());
	} 
:};	

LINEAS ::= LATERAL PAR_A SUMA ENTERO:n1 PAR_C
{:
  System.out.println("Derecha: "+n1.intValue());
  move_it(n1.intValue(),0); 
:};

LINEAS ::= REPETIR PAR_A ENTERO:n1 PAR_C COR_A LATERAL PAR_A SUMA ENTERO:n2 PAR_C COR_C
{: 
	for (int i = 0; i < n1; i++) {
		System.out.println("Rep("+i+")-> Derecha: "+n2.intValue());
		move_it(n2.intValue(),0);
	} 
:};	

LINEAS ::= LATERAL PAR_A ENTERO:n1 PAR_C
{:
  System.out.println("Derecha: "+n1.intValue());
  move_it(n1.intValue(),0); 
:};

LINEAS ::= REPETIR PAR_A ENTERO:n1 PAR_C COR_A LATERAL PAR_A ENTERO:n2 PAR_C COR_C
{: 
	for (int i = 0; i < n1; i++) {
		System.out.println("Rep("+i+")-> Derecha: "+n2.intValue());
		move_it(n2.intValue(),0);
	} 
:};	

LINEAS ::= LATERAL PAR_A RESTA ENTERO:n1 PAR_C
{:
	System.out.println("Izquierda: "+n1.intValue());
	move_it(-n1.intValue(),0); 
:};

LINEAS ::= REPETIR PAR_A ENTERO:n1 PAR_C COR_A LATERAL PAR_A RESTA ENTERO:n2 PAR_C COR_C
{: 
	for (int i = 0; i < n1; i++) {
		System.out.println("Rep("+i+")-> Izquierda: "+n2.intValue());
		move_it(-n2.intValue(),0);
	} 
:};